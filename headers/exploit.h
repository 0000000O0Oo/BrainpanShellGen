#pragma once
#if defined(_WIN32)

#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif

#include <winsock2.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")
#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)
#define CLOSESOCKET(s) closesocket(s)
#define GETSOCKETERRNO() WSAGetLastError()
#else
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <errno.h>
#define ISVALIDSOCKET(s) ((s) >= 0)
#define SOCKET int
#define CLOSESOCKET(s) close(s)
#define GETSOCKETERRNO() (errno)
#endif

#include <iostream>
#include <cstring>
#include <fstream>
#include <sstream>
#include <vector>
#include "printers.h"
//#include <locale>
#include <string>
//#include <codecvt>

class Exploit : public Printers{
    unsigned char* SHELLCODE;
    SOCKET SOCKET_PEER;

    unsigned char* ParseShellCode(std::string& SHELLCODE_PATH);
    void PrintStatus(std::string status_option, std::string status_value) const override;
public:
    void PrepareSocket(std::string& TARGET_HOST, std::string& TARGET_PORT);
    Exploit();
    Exploit(std::string TARGET_HOST, std::string TARGET_PORT, std::string SHELLCODE_PATH){
        PrepareSocket(TARGET_HOST, TARGET_PORT);
        SHELLCODE = ParseShellCode(SHELLCODE_PATH);
    }

};
